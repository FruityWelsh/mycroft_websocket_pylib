#!/bin/env python
import json
from websocket import create_connection  # type: ignore
import logging

class connect():
    def __init__(self, mycroft_addr, mycroft_port, LOGLEVEL=logging.WARN):
        logging.basicConfig(level=LOGLEVEL)
        self.url = f"ws://{mycroft_addr}:{mycroft_port}/core" 
        logging.debug(f"Websocket url: {self.url}")
        try:
           self.mycroft_connection = create_connection(self.url)
           logging.debug("Websocket connected to {self.url}") 
        except:    
           self.mycroft_connection.close() 
           raise

        
    def _send(self, message): 
        logging.debug(f"Data being sent: {message}")
        send_status = self.mycroft_connection.send(json.dumps(message))
        logging.debug(f"Send status: {send_status}")
        return send_status
      
    def listen(self):  
        message_recevied = self.mycroft_connection.recv() 
        logging.debug(f"message_recevied: {message_recevied}")
        yield message_recevied
    
    def close(self):
        logging.debug("Mycroft websocket closing")
        self.mycroft_connection.close()
        logging.debug("Mycroft websocket closed")

    def __exit__(self):
        self.close()

    def speak(self, utterance):
        message = {'type': 'speak',
                   'data': {'utterance': utterance}
                  }
        send_status = self._send(message)
        return send_status 

### The following was auto generated by __main__ ###
    def recongnizer_loop_record_begin(self):
       message = "{'type': 'recongnizer_loop:record_begin'"
        send_status = self._send(message)
        return send_status
    

    def volume_unduck(self):
       message = "{'type': 'mycroft.volume.unduck'"
        send_status = self._send(message)
        return send_status
    

    def volume_set(self, percent=None):
        message = "{'type': 'mycroft.volume.set','data': {
                                  'percent':percent
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_stop(self):
       message = "{'type': 'mycroft.audio.service.stop'"
        send_status = self._send(message)
        return send_status
    

    def system_reboot(self):
       message = "{'type': 'system.reboot'"
        send_status = self._send(message)
        return send_status
    

    def play_query(self, phrase=None):
        message = "{'type': 'play:query','data': {
                                  'phrase':phrase
                                  }
        send_status = self._send(message)
        return send_status
    

    def recongnizer_loop_record_end(self):
       message = "{'type': 'recongnizer_loop:record_end'"
        send_status = self._send(message)
        return send_status
    

    def mic_listen(self):
       message = "{'type': 'mycroft.mic.listen'"
        send_status = self._send(message)
        return send_status
    

    def volume_mute(self, speak_message=None):
        message = "{'type': 'mycroft.volume.mute','data': {
                                  'speak_message':speak_message
                                  }
        send_status = self._send(message)
        return send_status
    

    def volume_get(self):
       message = "{'type': 'mycroft.volume.get'"
        send_status = self._send(message)
        return send_status
    

    def system_ssh_enable(self):
       message = "{'type': 'system.ssh.enable'"
        send_status = self._send(message)
        return send_status
    

    def skill_manager_deactivate(self, skill=None):
        message = "{'type': 'skill.manager.deactivate','data': {
                                  'skill':skill
                                  }
        send_status = self._send(message)
        return send_status
    

    def skill_disable_intent(self, intent_name=None):
        message = "{'type': 'mycroft.skill.disable_intent','data': {
                                  'intent_name':intent_name
                                  }
        send_status = self._send(message)
        return send_status
    

    def msm_updating(self):
       message = "{'type': 'msm.updating'"
        send_status = self._send(message)
        return send_status
    

    def internet_connected(self):
       message = "{'type': 'mycroft.internet.connected'"
        send_status = self._send(message)
        return send_status
    

    def msm_installed(self):
       message = "{'type': 'msm.installed'"
        send_status = self._send(message)
        return send_status
    

    def mic_unmute(self):
       message = "{'type': 'mycroft.mic.unmute'"
        send_status = self._send(message)
        return send_status
    

    def msm_updated(self):
       message = "{'type': 'msm.updated'"
        send_status = self._send(message)
        return send_status
    

    def skill_loading_failure(self, id):
        message = "{'type': 'mycroft.skill.loading_failure','data': {
                                  'id':id,
                                  'folder':folder
                                  }
        send_status = self._send(message)
        return send_status
    

    def skill_loaded(self, id=None ,name=None ,folder):
        message = "{'type': 'mycroft.skill.loaded','data': {
                                  'id':id,
                                  'name':name,
                                  'folder':folder,
                                  'modified':modified
                                  }
        send_status = self._send(message)
        return send_status
    

    def skill_handler_complete(self):
       message = "{'type': 'mycroft.skill.handler.complete'"
        send_status = self._send(message)
        return send_status
    

    def private_mycroftai_has_alarm(self, active_alarms=None):
        message = "{'type': 'private.mycroftai.has.alarm','data': {
                                  'active_alarms':active_alarms
                                  }
        send_status = self._send(message)
        return send_status
    

    def recognizer_loop_audio_output_start(self):
       message = "{'type': 'recognizer_loop:audio_output_start'"
        send_status = self._send(message)
        return send_status
    

    def volume_decrease(self, play_sound=None):
        message = "{'type': 'mycroft.volume.decrease','data': {
                                  'play_sound':play_sound
                                  }
        send_status = self._send(message)
        return send_status
    

    def skillmanager_update(self):
       message = "{'type': 'skillmanager.update'"
        send_status = self._send(message)
        return send_status
    

    def sysstem_ssh_disable(self):
       message = "{'type': 'sysstem.ssh.disable'"
        send_status = self._send(message)
        return send_status
    

    def volume_increase(self, play_sound=None):
        message = "{'type': 'mycroft.volume.increase','data': {
                                  'play_sound':play_sound
                                  }
        send_status = self._send(message)
        return send_status
    

    def volume_unmute(self, speak_message=None):
        message = "{'type': 'mycroft.volume.unmute','data': {
                                  'speak_message':speak_message
                                  }
        send_status = self._send(message)
        return send_status
    

    def enclosure_mouth_viseme_list(self, start):
        message = "{'type': 'enclosure.mouth.viseme_list','data': {
                                  'start':start,
                                  'visemes':visemes
                                  }
        send_status = self._send(message)
        return send_status
    

    def volume_get_response(self, percent):
        message = "{'type': 'mycroft.volume.get.response','data': {
                                  'percent':percent,
                                  'muted':muted
                                  }
        send_status = self._send(message)
        return send_status
    

    def (self, phrase):
        message = "{'type': '','data': {
                                  'phrase':phrase,
                                  'searching':searching
                                  }
        send_status = self._send(message)
        return send_status
    

    def speak(self, utterance=None):
        message = "{'type': 'speak','data': {
                                  'utterance':utterance
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_pause(self):
       message = "{'type': 'mycroft.audio.service.pause'"
        send_status = self._send(message)
        return send_status
    

    def msm_installing_succeeded(self, skill=None):
        message = "{'type': 'msm.installing.succeeded','data': {
                                  'skill':skill
                                  }
        send_status = self._send(message)
        return send_status
    

    def skills_settings_update(self):
       message = "{'type': 'mycroft.skills.settings.update'"
        send_status = self._send(message)
        return send_status
    

    def question_query(self, phrase=None):
        message = "{'type': 'question:query','data': {
                                  'phrase':phrase
                                  }
        send_status = self._send(message)
        return send_status
    

    def paired(self):
       message = "{'type': 'mycroft.paired'"
        send_status = self._send(message)
        return send_status
    

    def msm_install_failed(self, skill):
        message = "{'type': 'msm.install.failed','data': {
                                  'skill':skill,
                                  'error':error
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_list_backends(self):
       message = "{'type': 'mycroft.audio.service.list_backends'"
        send_status = self._send(message)
        return send_status
    

    def configuration_updated(self):
       message = "{'type': 'configuration.updated'"
        send_status = self._send(message)
        return send_status
    

    def volume_duck(self):
       message = "{'type': 'mycroft.volume.duck'"
        send_status = self._send(message)
        return send_status
    

    def skills_initialized(self):
       message = "{'type': 'mycroft.skills.initialized'"
        send_status = self._send(message)
        return send_status
    

    def awoken(self):
       message = "{'type': 'mycroft.awoken'"
        send_status = self._send(message)
        return send_status
    

    def debug_log(self, level):
        message = "{'type': 'mycroft.debug.log','data': {
                                  'level':level,
                                  'bus':bus
                                  }
        send_status = self._send(message)
        return send_status
    

    def skills_list(self, skills=None):
        message = "{'type': 'mycroft.skills.list','data': {
                                  'skills':skills
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_play(self):
       message = "{'type': 'mycroft.audio.service.play'"
        send_status = self._send(message)
        return send_status
    

    def mic_mute(self):
       message = "{'type': 'mycroft.mic.mute'"
        send_status = self._send(message)
        return send_status
    

    def open(self):
       message = "{'type': 'open'"
        send_status = self._send(message)
        return send_status
    

    def not_paird(self):
       message = "{'type': 'mycroft.not.paird'"
        send_status = self._send(message)
        return send_status
    

    def audio_service_track_info(self):
       message = "{'type': 'mycroft.audio.service.track_info'"
        send_status = self._send(message)
        return send_status
    

    def recognizer_loop_utterance(self, utterance):
        message = "{'type': 'recognizer_loop:utterance','data': {
                                  'utterance':utterance,
                                  'lang':lang
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_prev(self):
       message = "{'type': 'mycroft.audio.service.prev'"
        send_status = self._send(message)
        return send_status
    

    def recognizer_loop_wakeup(self):
       message = "{'type': 'recognizer_loop:wakeup'"
        send_status = self._send(message)
        return send_status
    

    def reconnecting(self):
       message = "{'type': 'reconnecting'"
        send_status = self._send(message)
        return send_status
    

    def skillmanager_list(self):
       message = "{'type': 'skillmanager.list'"
        send_status = self._send(message)
        return send_status
    

    def msm_remove_failed(self, skill):
        message = "{'type': 'msm.remove.failed','data': {
                                  'skill':skill,
                                  'error':error
                                  }
        send_status = self._send(message)
        return send_status
    

    def msm_removing(self):
       message = "{'type': 'msm.removing'"
        send_status = self._send(message)
        return send_status
    

    def audio_service_next(self):
       message = "{'type': 'mycroft.audio.service.next'"
        send_status = self._send(message)
        return send_status
    

    def system_update(self):
       message = "{'type': 'system.update'"
        send_status = self._send(message)
        return send_status
    

    def question_query_response(self, phrase=None ,skill_id=None ,answer=None ,conf=None ,callback_data):
        message = "{'type': 'question:query.response','data': {
                                  'phrase':phrase,
                                  'skill_id':skill_id,
                                  'answer':answer,
                                  'conf':conf,
                                  'callback_data':callback_data,
                                  'searching':searching
                                  }
        send_status = self._send(message)
        return send_status
    

    def play_start(self, skill_id=None ,phrase):
        message = "{'type': 'play:start','data': {
                                  'skill_id':skill_id,
                                  'phrase':phrase,
                                  'callback_data':callback_data
                                  }
        send_status = self._send(message)
        return send_status
    

    def skills_shutdown(self, id):
        message = "{'type': 'mycroft.skills.shutdown','data': {
                                  'id':id,
                                  'folder':folder
                                  }
        send_status = self._send(message)
        return send_status
    

    def msm_remove_succeeded(self, skill=None):
        message = "{'type': 'msm.remove.succeeded','data': {
                                  'skill':skill
                                  }
        send_status = self._send(message)
        return send_status
    

    def audio_service_track_info_reply(self):
       message = "{'type': 'mycroft.audio.service.track_info_reply'"
        send_status = self._send(message)
        return send_status
    

    def complete_intent_failure(self):
       message = "{'type': 'complete_intent_failure'"
        send_status = self._send(message)
        return send_status
    

    def recognizer_loop_sleep(self):
       message = "{'type': 'recognizer_loop:sleep'"
        send_status = self._send(message)
        return send_status
    

    def question_action(self):
       message = "{'type': 'question:action'"
        send_status = self._send(message)
        return send_status
    

    def audio_service_resume(self):
       message = "{'type': 'mycroft.audio.service.resume'"
        send_status = self._send(message)
        return send_status
    

    def system_ntp_sync(self):
       message = "{'type': 'system.ntp.sync'"
        send_status = self._send(message)
        return send_status
    

    def recognizer_loop_audio_output_end(self):
       message = "{'type': 'recognizer_loop:audio_output_end'"
        send_status = self._send(message)
        return send_status
    

    def system_wifi_setup(self):
       message = "{'type': 'system.wifi.setup'"
        send_status = self._send(message)
        return send_status
    

    def eyes_default(self):
       message = "{'type': 'mycroft.eyes.default'"
        send_status = self._send(message)
        return send_status
    

    def system_shutdown(self):
       message = "{'type': 'system.shutdown'"
        send_status = self._send(message)
        return send_status
    

    def closed(self):
       message = "{'type': 'closed'"
        send_status = self._send(message)
        return send_status
    

    def skill_handler_start(self, handler=None):
        message = "{'type': 'mycroft.skill.handler.start','data': {
                                  'handler':handler
                                  }
        send_status = self._send(message)
        return send_status
    

    def skill_enable_intent(self, intent_name=None):
        message = "{'type': 'mycroft.skill.enable_intent','data': {
                                  'intent_name':intent_name
                                  }
        send_status = self._send(message)
        return send_status
    

    def system_wifi_reset(self):
       message = "{'type': 'system.wifi.reset'"
        send_status = self._send(message)
        return send_status
    

    def ready(self):
       message = "{'type': 'mycroft.ready'"
        send_status = self._send(message)
        return send_status
    

    def stop(self):
       message = "{'type': 'mycroft.stop'"
        send_status = self._send(message)
        return send_status
    

    def msm_installing(self):
       message = "{'type': 'msm.installing'"
        send_status = self._send(message)
        return send_status
    

    def play_query_response(self, phrase=None ,skill_id=None ,conf):
        message = "{'type': 'play:query.response','data': {
                                  'phrase':phrase,
                                  'skill_id':skill_id,
                                  'conf':conf,
                                  'callback_data':callback_data
                                  }
        send_status = self._send(message)
        return send_status
    

    def msm_removed(self):
       message = "{'type': 'msm.removed'"
        send_status = self._send(message)
        return send_status
    

    def enclosure_notify_no_internet(self):
       message = "{'type': 'enclosure.notify.no_internet'"
        send_status = self._send(message)
        return send_status
    

    def recongizer_loop_wakeword(self, utterance):
        message = "{'type': 'recongizer_loop:wakeword','data': {
                                  'utterance':utterance,
                                  'session':session
                                  }
        send_status = self._send(message)
        return send_status
    
